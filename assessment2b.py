# -*- coding: utf-8 -*-
"""Assessment2B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qQBBADs9rEMRqAUPslHxBnQ9WONQOzz5

###### Assessment

###### I am going to provide two .csv files , you are supposed to work on them and have to provide solutions to the following problems

###### import necessary libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

"""###### merge those two csv files (after getting as dataframes, get them as a single dataframe)"""

df1=pd.read_csv('college_1.csv')
df2=pd.read_csv('college_2.csv')
df=pd.concat([df1,df2], ignore_index=True)
df.fillna(0,inplace=True)
df

"""###### Take each csv file , split that csv file into multiple categories (example csv files are added in the repo)

###### consider if the codekata score exceeds 15000 points(present week) then make a csv on those observations as Exceeded expectations.csv

###### if  10000<codekata score<15000   (Reached_expectations.csv)

###### if  7000<codekata score<10000   (Needs_Improvement.csv)

###### if  codekate score < 7000        (Unsatisfactory.csv)
"""

Exceeded_expectations = df[df['CodeKata Score']>15000]
Exceeded_expectations.to_csv('Exceeded_expectations.csv')

Reached_expectations= df[df['CodeKata Score'].between(10000,15000)]
Reached_expectations.to_csv('Reached_expectations.csv')

Needs_Improvement= df[df['CodeKata Score'].between(7000,10000)]
Needs_Improvement.to_csv('Needs_Improvement.csv')

Unsatisfactory= df[df['CodeKata Score'] < 7000]
Unsatisfactory.to_csv('Unsatisfactory.csv')

"""###### Average of previous week geekions vs this week geekions (i.e Previous Geekions vs CodeKata Score)"""

print('Average of previous week geekions : ',df['Previous Geekions'].mean())
print('Average of this week geekions : ',df['CodeKata Score'].mean())

#bar plot

data=pd.DataFrame({'Columns': ['Previous Geekions','Codekata Score'],'Values':[df['Previous Geekions'].mean(),df['CodeKata Score'].mean()]})
px.bar(data,x='Columns',y='Values',color='Columns',title='Average of previous week geekions vs this week geekions ',text_auto=True)

"""###### No of students participated """

print('No of students participated :',df['Name'].count())

"""###### #Average completion of python course or my_sql or python english or computational thinking"""

Completion=data.loc[(df['python']==100.0) | (df['mysql']==100.0) | (df['python_en']==100.0) | (df['computational_thinking']==100.0)]
print('Average completion of python course or my_sql or python english or computational thinking : ',((len(Completion.index)/len(df.index))*100),'%')

"""###### rising star of the week (top 3 candidate who performed well in that particular week)"""

df=df.sort_values(by=['Rising'], ascending=[False])
df.head(3)
#df[df.columns[0]].head(3)

"""###### Shining stars of the week (top 3 candidates who has highest geekions)"""

df=df.sort_values(by=['Previous Geekions'], ascending=[False])
#df.head(3)
df[df.columns[0]].head(3)

"""###### Department wise codekata performence (pie chart)"""

g=df.groupby('Department')['CodeKata Score'].mean()
dept=['CSE','ECE','EEE']
plt.pie(g,labels=dept)
plt.show()

"""###### Department wise toppers (horizantal bar graph or any visual representations of your choice)"""

#topper of each dept
df["rank"] = df.groupby("Department")["CodeKata Score"].rank(method="dense", ascending=False)
df.set_index(['rank'],inplace=True)
df=df.sort_values(by=['rank'])
x=df[df.index==1]['Name']
y=df[df.index==1]['CodeKata Score']
plt.barh(x,y)
plt.show()

# dept wise toppers

#Computer Science and Engineering

data=df[['Name','CodeKata Score']].where(df['Department']=='Computer Science and Engineering')
csc_topper=data.nlargest(5,"CodeKata Score")
fig = px.bar(csc_topper, x="Name",y='CodeKata Score',title="Department wise toppers - Computer Science and Engineering")
fig.show()

#Electronics and Communication Engineering

data=df[['Name','CodeKata Score']].where(df['Department']=='Electronics and Communication Engineering')
ece_topper=df1.nlargest(5,"CodeKata Score")
fig = px.bar(ece_topper, x="Name",y='CodeKata Score',title="Department wise toppers - Electronics and Communication Engineering")
fig.show()

#Electronics and Electrical Engineering

data=df[['Name','CodeKata Score']].where(df['Department']=='Electronics and Electrical Engineering')
eee_topper=df1.nlargest(5,"CodeKata Score")
fig = px.bar(eee_topper, x="Name",y='CodeKata Score',title="Department wise toppers - Electronics and Electrical Engineering")
fig.show()